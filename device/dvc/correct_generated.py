#-----------------------------------------------------------
# correct_generated.py
# 17.11.2017
# Correct files, generated by cubemx
#-----------------------------------------------------------

import os.path
import re

Hlp = None

class Helper(object):
    def __init__(self):
        self.reinit()

    def reinit(self):
        self.marks = []
        self.contents = None
        self.newContents = None
        self.updated = False
        self.lastPos = 0
        self.corrected = False
        self.changes = 0

    def start(self, mark, pattern, flags = 0):
        self.changes += 1
        self.marks.append(mark)
        r = re.compile(pattern, flags)
        m = r.search(self.contents, self.lastPos)
        if m:
            self.lastPos = m.start()        
        return m

    def end(self):
        del self.marks[-1]
        self.contents = self.newContents
        self.updated = True

    def get_skipped(self):
        return len(self.marks)

    def rewind(self):
        self.lastPos = 0

def correct_init():
    global Hlp
    Hlp = Helper()


def correct_fin():
    pass

def correct_begin(file_path):
    hlp = Hlp
    hlp.reinit()
    fh = open(file_path, 'r')
    contents = hlp.contents = fh.read()
    fh.close()
    
    m = hlp.start(0, '\<corrected\>')
    if m:
        hlp.corrected = True
    else:
        hlp.reinit()    
        hlp.contents = contents    

def correct_end(file_path):
    hlp = Hlp
    quoted_file_path = '"' + file_path + '"'
    if hlp.corrected:
        print quoted_file_path + ' is already corrected.'
    elif hlp.get_skipped() == 0 and hlp.updated:
        fh = open(file_path, 'w')
        fh.write(hlp.contents)
        fh.close()
        print quoted_file_path + ': SUCCESS'
    else:
        print quoted_file_path + ': FAILURE'
        print '  marks: ' + str(hlp.marks)
    
    
def correct_main_c():
    file_name = 'main.c'
    hlp = Hlp
    
    file_path = os.path.join('templates', 'src', file_name)
    correct_begin(file_path)
    if hlp.corrected:
        correct_end(file_path)
        return

    # mark "<corrected>"
    m = hlp.start(0, 'main\.c')
    if m:
        hlp.newContents = \
          m.string[0: m.end()] + \
          ' <corrected>' + \
          m.string[m.end():]
        hlp.end()

    # xmain
    m = hlp.start(1, '\/\* USER CODE BEGIN 2 \*\/.*?\/\* USER CODE END 3 \*\/.*?\n',
      re.DOTALL)
    if m:
        hlp.newContents = \
          m.string[0: m.start()] + \
          'void xmain(void);\n' + \
          '  xmain();' + \
          m.string[m.end():]
        hlp.end()
                  
    # RTC
    m = hlp.start(2, 'RTC_AlarmTypeDef sAlarm\;')
    if m:
        hlp.newContents = \
          m.string[0: m.start()] + \
          '/* ' + \
          m.string[m.start(): m.end()] + \
          ' */' + \
          m.string[m.end():]
        hlp.end()

    m = hlp.start(3, 'Initialize RTC and set the Time and Date.*?\*\/.*?\n', re.DOTALL)
    if m:
        hlp.newContents = \
          m.string[0: m.end()] + \
          '  /*' + \
          m.string[m.end():]
        hlp.end()
        
    m = hlp.start(4, '\/\*\*Enable the Alarm A')
    if m:
        hlp.newContents = \
          m.string[0: m.start()] + \
          '*/ ' + \
          m.string[m.start():]
        hlp.end()

    m = hlp.start(5, 'sAlarm.AlarmTime.Hours')
    if m:
        hlp.newContents = \
          m.string[0: m.start()] + \
          '/* ' + \
          m.string[m.start(): ]
        hlp.end()

    m = hlp.start(6, 'HAL_RTC_SetAlarm.*?\}', re.DOTALL)
    if m:
        hlp.newContents = \
          m.string[0: m.end()] + \
          ' */' + \
          m.string[m.end():]
        hlp.end()

    correct_end(file_path)
    

def correct_stm32f4xx_it_c():
    file_name = 'stm32f4xx_it.c'
    hlp = Hlp
    
    file_path = os.path.join('templates', 'src', file_name)
    correct_begin(file_path)
    if hlp.corrected:
        correct_end(file_path)
        return

    # mark "<corrected>"
    m = hlp.start(0, 'stm32f4xx_it\.c')
    if m:
        hlp.newContents = \
          m.string[0: m.end()] + \
          ' <corrected>' + \
          m.string[m.end():]
        hlp.end()

    # TIM1_BRK_TIM9_IRQHandler
    m = hlp.start(1, 'void TIM1_BRK_TIM9_IRQHandler')
    if m:
        hlp.newContents = \
          m.string[0: m.start()] + \
          '__weak ' + \
          m.string[m.start():]
        hlp.end()

    # TIM4_IRQHandler
    m = hlp.start(2, 'void TIM4_IRQHandler')
    if m:
        hlp.newContents = \
          m.string[0: m.start()] + \
          '__weak ' + \
          m.string[m.start():]
        hlp.end()

    correct_end(file_path)
    

correct_init()
correct_main_c()
correct_stm32f4xx_it_c()
correct_fin()



